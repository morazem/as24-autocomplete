{"version":3,"names":[],"mappings":"","sources":["src/as24-autocomplete.js"],"sourcesContent":["/**\n * Selects an element using the this element.\n * @param {string} selector Specifies the selector for lookup\n * @param {Element} this Specified within which element to perform the lookup\n * @return {Element}\n */\nvar $ = function (selector, root) { return root.querySelector(selector); };\n\n\nvar $$ = function (selector, root) { return root.querySelectorAll(selector); };\n\n\n/**\n * Checks whether elem has tag as a parent\n * @param {HTMLElement} tag\n * @returns {function}\n */\nvar closestByTag = function (tag) { return function (elem) { return elem.tagName === 'HTML'\n            ? null\n            : elem === tag\n                ? tag\n                : closestByTag(tag)(elem.parentNode); }; };\n\n\n\n/**\n * Binds an event listener on the element\n * @param {string} event\n * @param {Function} cb\n * @param {Element|Window|Document} el\n * @param {boolean} capturing\n */\nvar on = function (event, cb, el, capturing) {\n        if ( capturing === void 0 ) capturing = false;\n\n        return el.addEventListener(event, cb, capturing);\n};\n\n\n\n/**\n *\n * @param {string} eventName\n * @param {HTMLInputElement} el\n */\nvar triggerEvent = function (eventName, el) {\n    var evt = document.createEvent('Event');\n    evt.initEvent(eventName, true, true);\n    el.dispatchEvent(evt);\n};\n\n\n\n/**\n * Appends a child element to a target element\n * @param {HTMLElement|DocumentFragment} target\n * @returns {function}\n */\nvar appendTo = function (target) { return function (child) {\n        target.appendChild(child);\n        return target;\n    }; };\n\n\n\n/**\n * Finds a closest element by class name\n * @param {string} className\n * @returns {function}\n */\nvar closestByClassName = function (className) { return function (elem) { return elem.tagName === 'HTML'\n            ? null\n            : elem.classList.contains(className)\n                ? elem\n                : closestByClassName(className)(elem.parentNode); }; };\n\n/**\n * @class\n * @typedef SeparatedItemsDataSource\n */\nvar AutocompleteInput = (function (HTMLElement) {\n    function AutocompleteInput () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) AutocompleteInput.__proto__ = HTMLElement;\n    AutocompleteInput.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    AutocompleteInput.prototype.constructor = AutocompleteInput;\n\n    AutocompleteInput.prototype.setValue = function setValue (str) {\n        this.input.value = str;\n    };\n\n    AutocompleteInput.prototype.getValue = function getValue () {\n        return this.input.value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    };\n\n    AutocompleteInput.prototype.setDisabled = function setDisabled (flag) {\n        if (flag) {\n            this.input.setAttribute('disabled', 'disabled');\n        } else {\n            this.input.removeAttribute('disabled');\n        }\n    };\n\n    AutocompleteInput.prototype.isDisabled = function isDisabled () {\n        return this.input.hasAttribute('disabled');\n    };\n\n    AutocompleteInput.prototype.setError = function setError (flag) {\n        this.input.classList[flag ? 'add' : 'remove']('error');\n    };\n\n    AutocompleteInput.prototype.renderInput = function renderInput () {\n        return function inputRenderer(suggestions) {\n            this.setError(suggestions.length === 0);\n            return suggestions;\n        }.bind(this);\n    };\n\n    AutocompleteInput.prototype.onKeyDown = function onKeyDown (e) {\n        if (e.which === 9) {\n            triggerEvent('as24-autocomplete:input:focus-lost', this.input);\n        }\n        if (e.which === 40) {\n            triggerEvent('as24-autocomplete:input:go-down', this.input);\n            e.preventDefault();\n        }\n        if (e.which === 38) {\n            triggerEvent('as24-autocomplete:input:go-up', this.input);\n            e.preventDefault();\n        }\n    };\n\n    AutocompleteInput.prototype.onKeyUp = function onKeyUp (e) {\n        if (this.isVisible && (e.which === 13 || e.which === 9)) {\n            e.stopPropagation();\n            e.preventDefault();\n            this.selectItem();\n            return false;\n        }\n        if (e.which === 13) {\n            triggerEvent('as24-autocomplete:input:enter', this.input);\n        }\n        if (e.which === 27) {\n            this.onCrossClick();\n        }\n        if (e.which !== 40 && e.which !== 38 && e.which !== 13 && e.which !== 27) {\n            triggerEvent('as24-autocomplete:input:query', this.input);\n        }\n        return null;\n    };\n\n    AutocompleteInput.prototype.onInputClick = function onInputClick () {\n        this.isOpened = true;\n        triggerEvent('as24-autocomplete:input:trigger-suggestions', this.input);\n    };\n\n    AutocompleteInput.prototype.onDropDownClick = function onDropDownClick () {\n        if(this.input.disabled) { return; }\n        this.input.focus();\n        if (this.isOpened) {\n            this.isOpened = false;\n            triggerEvent('as24-autocomplete:input:close', this.input);\n        } else {\n            this.isOpened = true;\n            triggerEvent('as24-autocomplete:input:trigger-suggestions', this.input);\n        }\n    };\n\n    AutocompleteInput.prototype.onCrossClick = function onCrossClick () {\n        if(this.input.disabled) { return; }\n        this.input.focus();\n        if (this.input.value === '') {\n            this.isOpened = false;\n            triggerEvent('as24-autocomplete:input:close', this.input);\n        } else {\n            this.input.value = '';\n            triggerEvent('as24-autocomplete:input:cleanup', this.input);\n            if (this.isOpened) {\n                triggerEvent('as24-autocomplete:input:trigger-suggestions', this.input);\n            }\n        }\n    };\n\n    AutocompleteInput.prototype.attachedCallback = function attachedCallback () {\n        this.isOpened = false;\n        this.isDirty = false;\n        this.dropDown = $('.as24-autocomplete__icon-wrapper', this);\n        this.cross = $('.as24-autocomplete__icon-cross', this);\n        this.input = $('input', this);\n        on('click', this.onInputClick.bind(this), this.input);\n        on('click', this.onDropDownClick.bind(this), this.dropDown);\n        on('click', this.onCrossClick.bind(this), this.cross);\n        on('keyup', this.onKeyUp.bind(this), this.input, true);\n        on('keydown', this.onKeyDown.bind(this), this.input, true);\n    };\n\n    return AutocompleteInput;\n}(HTMLElement));\n\nfunction registerDS() {\n    try {\n        return document.registerElement('as24-autocomplete-input', AutocompleteInput);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * @class\n * @typedef Suggestion\n */\nvar Suggestion = function Suggestion(key, value) {\n    this.key = key;\n    this.value = value;\n};\n\nSuggestion.prototype.toString = function toString () {\n    return (\"Suggestion(\" + (this.key) + \": \" + (this.value) + \")\");\n};\n\n/**\n * Test the string against item's value\\\n * @param {RegExp} regexp\n * @returns {function}\n */\nvar valuePredicate = function (regexp) { return function (item) { return item.value.match(regexp) !== null; }; };\n\n\n/**\n * @class\n * @typedef DataSource\n */\nvar PlainDataSource = (function (HTMLElement) {\n    function PlainDataSource () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) PlainDataSource.__proto__ = HTMLElement;\n    PlainDataSource.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    PlainDataSource.prototype.constructor = PlainDataSource;\n\n    PlainDataSource.prototype.fetchItems = function fetchItems (queryString) {\n        var this$1 = this;\n\n        return new Promise(function (res) {\n            var keyVals = this$1.extractKeyValues();\n            var startingWith = keyVals\n                .filter(valuePredicate(new RegExp((\"^\" + queryString), 'ig')));\n            var theRestContaining = keyVals\n                .filter(function (x) { return startingWith.indexOf(x) === -1; })\n                .filter(valuePredicate(new RegExp((\"\" + queryString), 'ig')));\n            return res(startingWith.concat(theRestContaining));\n        });\n    };\n\n    /**\n     * @param {string} keyValue\n     * @return {Promise.<Suggestion>}\n     */\n    PlainDataSource.prototype.getSuggestionByKey = function getSuggestionByKey (keyValue) {\n        var this$1 = this;\n\n        return new Promise(function (res, rej) {\n            var items = this$1.extractKeyValues();\n            if (keyValue && items) {\n                return res(items.filter(function (item) { return item.key === keyValue; })[0]);\n            }\n            return rej(null);\n        });\n    };\n\n    /**\n     * Extracts a list of objects like { key:string, value:string }\n     * @returns {Array<{key:string, value:string}>}\n     */\n    PlainDataSource.prototype.extractKeyValues = function extractKeyValues () {\n        return Array.prototype.slice.call(this.querySelectorAll('item')).map(function (tag) { return new Suggestion(tag.getAttribute('key'), tag.getAttribute('value')); }\n        );\n    };\n\n    return PlainDataSource;\n}(HTMLElement));\n\nfunction registerDS$1() {\n    try {\n        return document.registerElement('as24-plain-data-source', PlainDataSource);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * @class\n * @typedef Suggestion\n */\nvar Suggestion$1 = function Suggestion$1(key, value) {\n    this.key = key;\n    this.value = value;\n};\n\nSuggestion$1.prototype.toString = function toString () {\n    return (\"Suggestion(\" + (this.key) + \": \" + (this.value) + \")\");\n};\n\nvar SuggestionsGroup = function SuggestionsGroup(label, items) {\n    this.label = label;\n    this.items = items;\n};\n\nSuggestionsGroup.prototype.toString = function toString () {\n    return (\"SuggestionsGroup(\" + (this.label) + \", \" + (this.items.length) + \" items)\");\n};\n\n/**\n * Test the string against item's value\\\n * @param {RegExp} regexp\n * @param {string|undefined} key\n * @returns {function}\n */\nvar valuePredicate$1 = function (regexp, key) { return function (sugg) { return regexp !== null\n            ? sugg.value.match(regexp) !== null\n            : typeof key !== 'undefined'\n                ? sugg.key === key\n                : true; }; };\n\n\n/**\n * @class\n * @typedef GroupedItemsDataSource\n */\nvar GroupedItemsDataSource = (function (HTMLElement) {\n    function GroupedItemsDataSource () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) GroupedItemsDataSource.__proto__ = HTMLElement;\n    GroupedItemsDataSource.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    GroupedItemsDataSource.prototype.constructor = GroupedItemsDataSource;\n\n    GroupedItemsDataSource.prototype.fetchItems = function fetchItems (queryString) {\n        var this$1 = this;\n\n        return new Promise(function (res) { return res(this$1.buildGroups(queryString)); });\n    };\n\n    /**\n     * @param {string} theKey\n     * @return {Promise.<Suggestion>}\n     */\n    GroupedItemsDataSource.prototype.getSuggestionByKey = function getSuggestionByKey (theKey) {\n        var this$1 = this;\n\n        return new Promise(function (res, rej) {\n            var item = Array.prototype.slice.call(this$1.querySelectorAll('item'))\n                .map(function (i) { return new Suggestion$1(i.getAttribute('key'), i.getAttribute('value')); })\n                .filter(valuePredicate$1(null, theKey));\n            if (item.length) {\n                return res(item[0]);\n            }\n            return rej(null);\n        });\n    };\n\n    /**\n     * Extracts a list of objects like { key:string, value:string }\n     * @param {HTMLElement} group\n     * @param {string} queryString The query from the user\n     * @param {string|undefined} theKey The key to look for\n     * @returns {Array<{key:string, value:string}>}\n     */\n    GroupedItemsDataSource.prototype.buildItems = function buildItems (group, queryString, theKey) {\n        var kvs = Array.prototype.slice.call(group.querySelectorAll('item')).map(function (tag) { return new Suggestion$1(tag.getAttribute('key'), tag.getAttribute('value')); }\n        );\n\n        var startingWith = kvs\n            .filter(valuePredicate$1(new RegExp((\"^\" + queryString), 'ig'), theKey));\n\n        var theRestContaining = kvs\n            .filter(function (x) { return startingWith.indexOf(x) === -1; })\n            .filter(valuePredicate$1(new RegExp((\"\" + queryString), 'ig'), theKey));\n\n        return startingWith.concat(theRestContaining);\n    };\n\n    GroupedItemsDataSource.prototype.buildGroups = function buildGroups (queryString, theKey) {\n        var this$1 = this;\n\n        return Array.prototype.slice.call(this.querySelectorAll('group'))\n            .reduce(function (res, group) {\n                var items = this$1.buildItems(group, queryString, theKey);\n                return items.length\n                    ? res.concat(new SuggestionsGroup(group.getAttribute('label'), items))\n                    : res;\n            }, []);\n    };\n\n    return GroupedItemsDataSource;\n}(HTMLElement));\n\nfunction registerDS$2() {\n    try {\n        return document.registerElement('as24-grouped-items-data-source', GroupedItemsDataSource);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * @class\n * @typedef PlainSuggestionsList\n */\nvar PlainSuggestionsList = (function (HTMLElement) {\n    function PlainSuggestionsList () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) PlainSuggestionsList.__proto__ = HTMLElement;\n    PlainSuggestionsList.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    PlainSuggestionsList.prototype.constructor = PlainSuggestionsList;\n\n    PlainSuggestionsList.prototype.show = function show () {\n        this.classList.add('as24-autocomplete__list--visible');\n        triggerEvent('as24-autocomplete:suggestions-list:show', this);\n    };\n\n    PlainSuggestionsList.prototype.hide = function hide () {\n        this.classList.remove('as24-autocomplete__list--visible');\n        triggerEvent('as24-autocomplete:suggestions-list:hide', this);\n    };\n\n    PlainSuggestionsList.prototype.isEmpty = function isEmpty () {\n      return $('.as24-autocomplete__list-item--empty', this);\n    };\n\n    PlainSuggestionsList.prototype.isVisible = function isVisible () {\n        return this.classList.contains('as24-autocomplete__list--visible');\n    };\n\n    PlainSuggestionsList.prototype.getSelectedSuggestionItem = function getSelectedSuggestionItem () {\n        return $('.as24-autocomplete__list-item--selected', this);\n    };\n\n    PlainSuggestionsList.prototype.scrollToSelectedItem = function scrollToSelectedItem (selected) {\n        var listHeight = this.getBoundingClientRect().height;\n        var selectedTop = selected.offsetTop;\n        var selectedHeight = selected.offsetHeight;\n        this.scrollTop = -1 * (listHeight - (selectedTop + selectedHeight));\n    };\n\n    PlainSuggestionsList.prototype.moveSelection = function moveSelection (dir) {\n        var next = dir === 1 ? 'nextSibling' : 'previousSibling';\n        var currActiveItem = this.getSelectedSuggestionItem(this);\n        var nextActiveItem =\n            currActiveItem === null\n                ? $('.as24-autocomplete__list-item', this)\n                : currActiveItem[next] !== null\n                    ? currActiveItem[next]\n                    : currActiveItem;\n        if (currActiveItem) {\n            currActiveItem.classList.remove('as24-autocomplete__list-item--selected');\n        }\n        nextActiveItem.classList.add('as24-autocomplete__list-item--selected');\n        this.scrollToSelectedItem(nextActiveItem);\n    };\n\n    PlainSuggestionsList.prototype.onItemMouseOver = function onItemMouseOver (e) {\n        e.stopPropagation();\n        var preselected = $('.as24-autocomplete__list-item--preselected', this);\n        if (e.target.tagName === 'LI') {\n            if (preselected) {\n                preselected.classList.remove('as24-autocomplete__list-item--preselected');\n            }\n            e.target.classList.add('as24-autocomplete__list-item--preselected');\n        }\n    };\n\n    PlainSuggestionsList.prototype.selectItem = function selectItem () {\n        var li = this.getSelectedSuggestionItem();\n        if (li && li.dataset.type && li.dataset.type === 'selectable') {\n            triggerEvent('as24-autocomplete:suggestion:selected', li);\n            this.hide();\n        }\n    };\n\n    PlainSuggestionsList.prototype.onClick = function onClick (e) {\n        var li = closestByClassName('as24-autocomplete__list-item')(e.target);\n        if (li && li.dataset.type && li.dataset.type === 'selectable') {\n            this.hide();\n            triggerEvent('as24-autocomplete:suggestion:selected', li);\n        }\n    };\n\n    PlainSuggestionsList.prototype.renderItem = function renderItem (searchStr) {\n        return function liRenderer(item) {\n            var li = document.createElement('li');\n            li.classList.add('as24-autocomplete__list-item');\n            li.dataset.key = item.key;\n            li.dataset.type = 'selectable';\n            li.dataset.label = item.value;\n            li.innerHTML = item.value.replace(new RegExp((\"(\" + searchStr + \")\"), 'ig'), '<strong>$1</strong>');\n            return li;\n        };\n    };\n\n    PlainSuggestionsList.prototype.renderEmptyListItem = function renderEmptyListItem (emptyMessage) {\n        var li = document.createElement('li');\n        ['as24-autocomplete__list-item', 'as24-autocomplete__list-item--empty'].forEach(li.classList.add.bind(li.classList));\n        li.dataset.type = 'unselectable';\n        li.dataset.key = '';\n        li.innerText = emptyMessage;\n        return li;\n    };\n\n    PlainSuggestionsList.prototype.renderItems = function renderItems (userQuery, emptyMessage) {\n        return function suggestionsRenderer(suggestions) {\n            this.innerHTML = '';\n            var df = document.createDocumentFragment();\n\n            (suggestions.length\n                ? suggestions.map(this.renderItem(userQuery))\n                : [this.renderEmptyListItem(emptyMessage)]\n            ).forEach(appendTo(df));\n\n            appendTo(this)(df);\n            this.show();\n        }.bind(this);\n    };\n\n    PlainSuggestionsList.prototype.attachedCallback = function attachedCallback () {\n        on('mouseover', this.onItemMouseOver.bind(this), this);\n        on('click', this.onClick.bind(this), this);\n    };\n\n    return PlainSuggestionsList;\n}(HTMLElement));\n\nfunction registerDS$3() {\n    try {\n        return document.registerElement('as24-plain-suggestions-list', PlainSuggestionsList);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * @class\n * @typedef GroupedSuggestionsList\n */\nvar GroupedSuggestionsList = (function (HTMLElement) {\n    function GroupedSuggestionsList () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) GroupedSuggestionsList.__proto__ = HTMLElement;\n    GroupedSuggestionsList.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    GroupedSuggestionsList.prototype.constructor = GroupedSuggestionsList;\n\n    GroupedSuggestionsList.prototype.show = function show () {\n        this.classList.add('as24-autocomplete__list--visible');\n        triggerEvent('as24-autocomplete:suggestions-list:show', this);\n    };\n\n    GroupedSuggestionsList.prototype.hide = function hide () {\n        this.classList.remove('as24-autocomplete__list--visible');\n        triggerEvent('as24-autocomplete:suggestions-list:hide', this);\n    };\n\n    GroupedSuggestionsList.prototype.isEmpty = function isEmpty () {\n      return $('.as24-autocomplete__list-item--empty', this);\n    };\n\n    GroupedSuggestionsList.prototype.isVisible = function isVisible () {\n        return this.classList.contains('as24-autocomplete__list--visible');\n    };\n\n    GroupedSuggestionsList.prototype.getSelectedSuggestionItem = function getSelectedSuggestionItem () {\n        return $('.as24-autocomplete__list-item--selected', this);\n    };\n\n    GroupedSuggestionsList.prototype.scrollToSelectedItem = function scrollToSelectedItem (selected) {\n        var listHeight = this.getBoundingClientRect().height;\n        var selectedTop = selected.offsetTop;\n        var selectedHeight = selected.offsetHeight;\n        this.scrollTop = -1 * (listHeight - (selectedTop + selectedHeight));\n    };\n\n    GroupedSuggestionsList.prototype.moveSelection = function moveSelection (dir) {\n        var currActiveItem = this.getSelectedSuggestionItem(this);\n        var allItems = Array.prototype.slice.call($$('.as24-autocomplete__list-item', this))\n            .filter(function (i) { return i.dataset.type === 'selectable'; });\n        var currPos = currActiveItem === null ? -1 : allItems.indexOf(currActiveItem);\n        var nextPos = currPos + dir > allItems.length - 1\n            ? allItems.length - 1\n            : currPos + dir < 0\n                ? 0\n                : currPos + dir;\n        var nextActiveItem = allItems[nextPos];\n        if (currActiveItem) {\n            currActiveItem.classList.remove('as24-autocomplete__list-item--selected');\n        }\n        if (nextActiveItem) {\n            nextActiveItem.classList.add('as24-autocomplete__list-item--selected');\n            this.scrollToSelectedItem(nextActiveItem);\n        }\n    };\n\n    GroupedSuggestionsList.prototype.onItemMouseOver = function onItemMouseOver (e) {\n        e.stopPropagation();\n        var preselected = $('.as24-autocomplete__list-item--preselected', this);\n        if (e.target.tagName === 'LI') {\n            if (preselected) {\n                preselected.classList.remove('as24-autocomplete__list-item--preselected');\n            }\n            e.target.classList.add('as24-autocomplete__list-item--preselected');\n        }\n    };\n\n    GroupedSuggestionsList.prototype.selectItem = function selectItem () {\n        var li = this.getSelectedSuggestionItem();\n        if (li && li.dataset.type && li.dataset.type === 'selectable') {\n            triggerEvent('as24-autocomplete:suggestion:selected', li);\n            this.hide();\n        }\n    };\n\n    GroupedSuggestionsList.prototype.onClick = function onClick (e) {\n        var li = closestByClassName('as24-autocomplete__list-item')(e.target);\n        if (li && li.dataset.type && li.dataset.type === 'selectable') {\n            this.hide();\n            triggerEvent('as24-autocomplete:suggestion:selected', li);\n        }\n    };\n\n    GroupedSuggestionsList.prototype.renderItem = function renderItem (userQuery) {\n        return function liRenderer(item) {\n            var li = document.createElement('li');\n            li.classList.add('as24-autocomplete__list-item');\n            li.dataset.key = item.key;\n            li.dataset.type = 'selectable';\n            li.dataset.label = item.value;\n            li.innerHTML = item.value.replace(new RegExp((\"(\" + userQuery + \")\"), 'ig'), '<strong>$1</strong>');\n            return li;\n        };\n    };\n\n    GroupedSuggestionsList.prototype.renderSeparator = function renderSeparator (group) {\n        var div = document.createElement('div');\n        div.classList.add('as24-autocomplete__list-item');\n        div.classList.add('as24-autocomplete__separator');\n        div.dataset.type = 'unselectable';\n        div.innerHTML = group.label;\n        return div;\n    };\n\n    GroupedSuggestionsList.prototype.renderGroup = function renderGroup (userQuery) {\n        return function groupRenderer(group) {\n            var df = document.createDocumentFragment();\n            if (userQuery.length === 0) {\n              df.appendChild(this.renderSeparator(group));\n            }\n            group.items\n                .map(this.renderItem(userQuery))\n                .forEach(appendTo(df));\n            return df;\n        };\n    };\n\n    GroupedSuggestionsList.prototype.renderEmptyListItem = function renderEmptyListItem (emptyMessage) {\n        var li = document.createElement('li');\n        ['as24-autocomplete__list-item', 'as24-autocomplete__list-item--empty'].forEach(li.classList.add.bind(li.classList));\n        li.dataset.type = 'unselectable';\n        li.innerText = emptyMessage;\n        return li;\n    };\n\n    GroupedSuggestionsList.prototype.renderItems = function renderItems (userQuery, emptyMessage) {\n        return function suggestionsRenderer(suggestions) {\n            this.innerHTML = '';\n            var df = document.createDocumentFragment();\n\n            (suggestions.length\n                ? suggestions.map(this.renderGroup(userQuery).bind(this))\n                : [this.renderEmptyListItem(emptyMessage)]\n            ).forEach(appendTo(df));\n\n            appendTo(this)(df);\n            this.show();\n        }.bind(this);\n    };\n\n    GroupedSuggestionsList.prototype.attachedCallback = function attachedCallback () {\n        on('mouseover', this.onItemMouseOver.bind(this), this);\n        on('click', this.onClick.bind(this), this);\n    };\n\n    return GroupedSuggestionsList;\n}(HTMLElement));\n\nfunction registerDS$4() {\n    try {\n        return document.registerElement('as24-grouped-suggestions-list', GroupedSuggestionsList);\n    } catch (e) {\n        return null;\n    }\n}\n\nvar AutocompleteInput$1 = (function (HTMLElement) {\n    function AutocompleteInput () {\n        HTMLElement.apply(this, arguments);\n    }\n\n    if ( HTMLElement ) AutocompleteInput.__proto__ = HTMLElement;\n    AutocompleteInput.prototype = Object.create( HTMLElement && HTMLElement.prototype );\n    AutocompleteInput.prototype.constructor = AutocompleteInput;\n\n    AutocompleteInput.prototype.selectedValue = function selectedValue () {\n        return this.valueInput.value;\n    };\n\n    AutocompleteInput.prototype.userQuery = function userQuery () {\n        return this.userFacingInput.getValue();\n    };\n\n    AutocompleteInput.prototype.dataSourceElement = function dataSourceElement () {\n        return this.dataSource;\n    };\n\n    AutocompleteInput.prototype.reset = function reset () {\n        this.userFacingInput.setValue('');\n        this.valueInput.value = '';\n        this.list.hide();\n        this.isDirty = false;\n        this.classList.remove('as24-autocomplete--active');\n        this.classList.remove('as24-autocomplete--user-input');\n    };\n\n    AutocompleteInput.prototype.fetchList = function fetchList (userQuery) {\n        return this.dataSource.fetchItems(userQuery)\n            .then(this.userFacingInput.renderInput())\n            .then(this.list.renderItems(userQuery, this.emptyListMessage));\n    };\n\n    AutocompleteInput.prototype.getInitialValueByKey = function getInitialValueByKey () {\n        return this.dataSource.getSuggestionByKey(this.valueInput.value);\n    };\n\n    AutocompleteInput.prototype.attachedCallback = function attachedCallback () {\n        var this$1 = this;\n\n        this.emptyListMessage = this.getAttribute('empty-list-message') || '---';\n\n        this.userFacingInput = $('as24-autocomplete-input', this);\n\n        this.valueInput = $('input[data-role=\"value\"]', this);\n\n        this.list = $('[data-role=\"list\"]', this);\n\n        this.dataSource = this.querySelector('[role=data-source]');\n\n        if (!this.dataSource) {\n            throw new Error('The DataSource has not been found');\n        }\n\n        this.isDirty = false;\n\n        //setTimeout(() => {\n            if (this.valueInput.value) {\n                this.getInitialValueByKey()\n                    .then(function (suggestion) {\n                        if (suggestion) {\n                            this$1.userFacingInput.setValue(suggestion.value);\n                            this$1.classList.add('as24-autocomplete--user-input');\n                            this$1.isDirty = true;\n                        }\n                        return true;\n                    });\n            }\n        //});\n\n        on('as24-autocomplete:suggestion:selected', function (e) {\n            e.stopPropagation();\n            this$1.valueInput.value = e.target.dataset.key;\n            this$1.userFacingInput.setValue(e.target.dataset.label);\n            this$1.userFacingInput.isOpened = false;\n            this$1.list.hide();\n            this$1.classList.remove('as24-autocomplete--active');\n            this$1.classList.add('as24-autocomplete--user-input');\n            triggerEvent('change', this$1);\n        }, this);\n\n        on('as24-autocomplete:input:trigger-suggestions', function (e) {\n            e.stopPropagation();\n            if (!this$1.list.isVisible()) {\n                this$1.list.show();\n            }\n            this$1.classList.add('as24-autocomplete--active');\n            this$1.fetchList(this$1.userFacingInput.getValue()).then(function () { return this$1.list.moveSelection(1); });\n        }, this);\n\n        on('as24-autocomplete:input:focus-lost', function (e) {\n            e.stopPropagation();\n            if (this$1.userFacingInput.getValue() !== '' && !this$1.list.isEmpty()) {\n              this$1.list.selectItem();\n            } else  {\n              this$1.list.hide();\n              this$1.classList.remove('as24-autocomplete--active');\n            }\n        }, this);\n\n        on('as24-autocomplete:input:enter', function (e) {\n            e.stopPropagation();\n            if (this$1.list.isVisible()) {\n                this$1.list.selectItem();\n                this$1.list.hide();\n                this$1.classList.remove('as24-autocomplete--active');\n            } else {\n                this$1.fetchList(this$1.userFacingInput.getValue())\n                    .then(function () { return this$1.list.moveSelection(1); });\n                this$1.classList.add('as24-autocomplete--active');\n            }\n        }, this);\n\n        on('as24-autocomplete:input:query', function (e) {\n            e.stopPropagation();\n            if (this$1.userFacingInput.getValue() !== '') {\n                this$1.classList.add('as24-autocomplete--user-input');\n                this$1.classList.add('as24-autocomplete--active');\n            } else {\n                this$1.classList.remove('as24-autocomplete--user-input');\n            }\n            this$1.fetchList(this$1.userFacingInput.getValue()).then(function () {\n              this$1.list.moveSelection(1);\n              if (this$1.valueInput.value.length > 0 && (this$1.userFacingInput.getValue() === '' || this$1.list.isEmpty())) {\n                  this$1.valueInput.value = '';\n                  triggerEvent('change', this$1);\n              }\n            });\n        }, this);\n\n        on('as24-autocomplete:input:cleanup', function (e) {\n            e.stopPropagation();\n            this$1.classList.remove('as24-autocomplete--user-input');\n            this$1.classList.add('as24-autocomplete--active');\n            this$1.valueInput.value = '';\n            this$1.fetchList('').then(function () { return this$1.list.moveSelection(1); });\n            triggerEvent('change', this$1);\n        }, this);\n\n        on('as24-autocomplete:input:close', function (e) {\n            e.stopPropagation();\n            this$1.classList.remove('as24-autocomplete--user-input');\n            this$1.classList.remove('as24-autocomplete--active');\n            this$1.list.hide();\n        }, this);\n\n        on('as24-autocomplete:input:go-down', function (e) {\n            e.stopPropagation();\n            if (this$1.userFacingInput.getValue() !== '') {\n                this$1.classList.add('as24-autocomplete--active');\n            }\n            if (this$1.list.isVisible()) {\n                this$1.list.moveSelection(1);\n            } else {\n                this$1.fetchList(this$1.userFacingInput.getValue())\n                    .then(function () { return this$1.list.moveSelection(1); });\n            }\n        }, this);\n\n        on('as24-autocomplete:input:go-up', function (e) {\n            e.stopPropagation();\n            if (this$1.list.isVisible()) {\n                this$1.list.moveSelection(-1);\n            }\n        }, this);\n\n        on('click', function (e) {\n            if (closestByTag(this$1)(e.target) === this$1) {\n                return;\n            }\n            if (this$1.list.isVisible()) {\n                if (this$1.userFacingInput.getValue() !== '' && !this$1.list.isEmpty()) {\n                  this$1.list.selectItem();\n                }\n                this$1.list.hide();\n                this$1.userFacingInput.isOpened = false;\n                this$1.classList.remove('as24-autocomplete--active');\n            }\n        }, document);\n    };\n\n    AutocompleteInput.prototype.onAttributeChanged = function onAttributeChanged (attrName, oldVal, newVal) {\n        if (attrName === 'disabled') {\n            this.userFacingInput.setDisabled((oldVal !== newVal) && (newVal === 'true' || newVal === 'disabled'));\n            this.classList[\n                this.userFacingInput.isDisabled() ? 'add' : 'remove'\n            ]('as24-autocomplete--disabled');\n            this.list.hide();\n        }\n    };\n\n    return AutocompleteInput;\n}(HTMLElement));\n\n\n\nfunction register() {\n    try {\n        return document.registerElement('as24-autocomplete', AutocompleteInput$1);\n    } catch (e) {\n        return null;\n    }\n}\n\nregisterDS();\nregisterDS$1();\nregisterDS$2();\nregisterDS$3();\nregisterDS$4();\nregister();\n"],"file":"as24-autocomplete.js"}